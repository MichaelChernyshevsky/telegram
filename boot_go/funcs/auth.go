package funcs

import (
	"strings"

	models "../models"
	provider "../providers"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func HandleUnauthorized(msg *tgbotapi.Message) {
	switch msg.Text {
	case "üîë –í–æ–π—Ç–∏":
		RequestLogin(msg.Chat.ID)
	default:
		SendMainMenu(msg.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
	}
}

func HandleAuthorized(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	user := provider.AuthorizedUsers[chatID]

	switch msg.Text {
	case "‚ÑπÔ∏è –û–±–æ –º–Ω–µ":
		SendAboutMeMenu(chatID, user)
	case "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏":
		SendMessage(chatID, "–ö–æ–º–ø–∞–Ω–∏—è: "+user.Company+"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ...")
	case "üìÇ –ü—Ä–æ–µ–∫—Ç—ã":
		projects := "–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n" + strings.Join(user.Projects, "\n")
		SendMessage(chatID, projects)
	case "üö™ –í—ã–π—Ç–∏":
		provider.UsersMutex.Lock()
		delete(provider.AuthorizedUsers, chatID)
		provider.UsersMutex.Unlock()
		SendMainMenu(chatID, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
	default:
		SendAuthMenu(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	}
}

func RequestLogin(chatID int64) {
	provider.LoginState[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å\n–ü—Ä–∏–º–µ—Ä: admin:admin123")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	provider.Bot.Send(msg)
}

func ProcessLogin(chatID int64, text string) {
	credentials := strings.SplitN(text, ":", 2)
	if len(credentials) != 2 {
		SendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å")
		return
	}

	username := strings.TrimSpace(credentials[0])
	password := strings.TrimSpace(credentials[1])

	for _, user := range provider.PredefinedUsers {
		if user.Username == username && user.Password == password {
			provider.UsersMutex.Lock()
			provider.AuthorizedUsers[chatID] = &models.User{
				Username: user.Username,
				Name:     user.Name,
				Company:  user.Company,
				Projects: user.Projects,
			}
			provider.UsersMutex.Unlock()
			SendAuthMenu(chatID, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "+user.Name+"!")
			return
		}
	}

	SendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
	SendMainMenu(chatID, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
}

func HandleCommand(msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		SendMainMenu(msg.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
	case "help":
		SendMessage(msg.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å")
	}
}
