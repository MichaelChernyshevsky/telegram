package main

import (
	"fmt"
	"log"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type User struct {
	Username string
	Password string
	Name     string
	Company  string
	Projects []string
}

var (
	bot             *tgbotapi.BotAPI
	authorizedUsers = make(map[int64]*User)
	usersMutex      sync.Mutex
	loginState      = make(map[int64]bool)
	predefinedUsers = []User{
		{
			Username: "admin",
			Password: "admin123",
			Name:     "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
			Company:  "–¢–µ—Ö–Ω–æ–ö–æ–º–ø–∞–Ω–∏—è",
			Projects: []string{"–ü—Ä–æ–µ–∫—Ç –ê", "–ü—Ä–æ–µ–∫—Ç –ë"},
		},
	}
)

var (
	mainMenuKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîë –í–æ–π—Ç–∏"),
		),
	)
	authMenuKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÇ –ü—Ä–æ–µ–∫—Ç—ã"),
			tgbotapi.NewKeyboardButton("üö™ –í—ã–π—Ç–∏"),
		),
	)
)

func main() {
	var err error
	bot, err = tgbotapi.NewBotAPI("7548214792:AAGVP5ZiyUPtuuutLJEBiR-CKWZF9zjOzW8")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
			if update.CallbackQuery != nil {
				handleCallback(update.CallbackQuery)
			}
			continue
		}

		chatID := update.Message.Chat.ID

		if update.Message.IsCommand() {
			handleCommand(update.Message)
			continue
		}

		if loginState[chatID] {
			processLogin(chatID, update.Message.Text)
			loginState[chatID] = false
			continue
		}

		if _, authorized := authorizedUsers[chatID]; !authorized {
			handleUnauthorized(update.Message)
		} else {
			handleAuthorized(update.Message)
		}
	}
}

func handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	switch data {
	case "show_contact":
		sendMessage(chatID, "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\nEmail: user@example.com\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90")
	case "show_position":
		sendMessage(chatID, "–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: –°—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
	case "show_access":
		sendMessage(chatID, "–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
	default:
		sendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}

	// –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
	bot.Send(tgbotapi.NewCallback(callback.ID, ""))
}

func handleCommand(msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		sendMainMenu(msg.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
	case "help":
		sendMessage(msg.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å")
	}
}

func handleUnauthorized(msg *tgbotapi.Message) {
	switch msg.Text {
	case "üîë –í–æ–π—Ç–∏":
		requestLogin(msg.Chat.ID)
	default:
		sendMainMenu(msg.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
	}
}

func handleAuthorized(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	user := authorizedUsers[chatID]

	switch msg.Text {
	case "‚ÑπÔ∏è –û–±–æ –º–Ω–µ":
		sendAboutMeMenu(chatID, user)
	case "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏":
		sendMessage(chatID, "–ö–æ–º–ø–∞–Ω–∏—è: "+user.Company+"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ...")
	case "üìÇ –ü—Ä–æ–µ–∫—Ç—ã":
		projects := "–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n" + strings.Join(user.Projects, "\n")
		sendMessage(chatID, projects)
	case "üö™ –í—ã–π—Ç–∏":
		usersMutex.Lock()
		delete(authorizedUsers, chatID)
		usersMutex.Unlock()
		sendMainMenu(chatID, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
	default:
		sendAuthMenu(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	}
}

func sendAboutMeMenu(chatID int64, user *User) {
	info := fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n–ò–º—è: %s\n–õ–æ–≥–∏–Ω: %s\n–ö–æ–º–ø–∞–Ω–∏—è: %s",
		user.Name, user.Username, user.Company)

	// –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "show_contact"),
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–ª–∂–Ω–æ—Å—Ç—å", "show_position"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞", "show_access"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, info)
	msg.ReplyMarkup = inlineKeyboard
	bot.Send(msg)
}

func requestLogin(chatID int64) {
	loginState[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å\n–ü—Ä–∏–º–µ—Ä: admin:admin123")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	bot.Send(msg)
}

func processLogin(chatID int64, text string) {
	credentials := strings.SplitN(text, ":", 2)
	if len(credentials) != 2 {
		sendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å")
		return
	}

	username := strings.TrimSpace(credentials[0])
	password := strings.TrimSpace(credentials[1])

	for _, user := range predefinedUsers {
		if user.Username == username && user.Password == password {
			usersMutex.Lock()
			authorizedUsers[chatID] = &User{
				Username: user.Username,
				Name:     user.Name,
				Company:  user.Company,
				Projects: user.Projects,
			}
			usersMutex.Unlock()
			sendAuthMenu(chatID, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "+user.Name+"!")
			return
		}
	}

	sendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
	sendMainMenu(chatID, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
}

func sendMainMenu(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = mainMenuKeyboard
	bot.Send(msg)
}

func sendAuthMenu(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = authMenuKeyboard
	bot.Send(msg)
}

func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}
